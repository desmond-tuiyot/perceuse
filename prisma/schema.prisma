// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../server/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Era {
  OLD_SCHOOL
  NEW_SCHOOL
}

model DanceMove {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Information about the dance move
  name         String
  aliases      String[]
  tutorials    String[] // currently just links. Might be better to create a Tutorial model
  origin       String? // update to country enum
  dateCreated  DateTime?
  era          Era?
  officialSong String?

  // Info about learning the dance move
  dateLearned       DateTime?
  datesReviewed     DateTime[]
  difficultyHistory Difficulty[]

  // Relation to Creator
  creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?

  // Relation to DanceStyle
  danceStyle   DanceStyle? @relation(fields: [danceStyleId], references: [id])
  danceStyleId Int?

  // Relation to Notes
  notes Note[]
}

model Creator {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to DanceMove
  danceMoves DanceMove[]

  // Relation to DanceStyle
  danceStyles DanceStyle[]
}

model Difficulty {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Information about the difficulty
  date   DateTime
  rating Int

  // Relation to DanceMove
  danceMove   DanceMove @relation(fields: [danceMoveId], references: [id])
  danceMoveId Int

  // Relation to Notes
  notes Note[]
}

model DanceStyle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Information about the dance style
  name        String
  description String?
  aliases     String[]
  origin      String? // update to country enum
  dateCreated DateTime?
  creator     Creator?  @relation(fields: [creatorId], references: [id])
  creatorId   Int?

  // Relation to DanceMove
  danceMoves DanceMove[]

  // Relation to Notes
  notes Note[]
}

model Note {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Information about the note
  text String

  // Relation to DanceMove
  danceMove   DanceMove? @relation(fields: [danceMoveId], references: [id])
  danceMoveId Int?

  // Relation to Difficulty
  difficulty   Difficulty? @relation(fields: [difficultyId], references: [id])
  difficultyId Int?

  // Relation to DanceStyle
  danceStyle   DanceStyle? @relation(fields: [danceStyleId], references: [id])
  danceStyleId Int?
}
