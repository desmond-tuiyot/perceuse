# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCreator {
  _avg: CreatorAvgAggregate
  _count: CreatorCountAggregate
  _max: CreatorMaxAggregate
  _min: CreatorMinAggregate
  _sum: CreatorSumAggregate
}

type AggregateDanceMove {
  _avg: DanceMoveAvgAggregate
  _count: DanceMoveCountAggregate
  _max: DanceMoveMaxAggregate
  _min: DanceMoveMinAggregate
  _sum: DanceMoveSumAggregate
}

type Creator {
  _count: CreatorCount
  createdAt: DateTimeISO!
  danceMove(cursor: DanceMoveWhereUniqueInput, distinct: [DanceMoveScalarFieldEnum!], orderBy: [DanceMoveOrderByWithRelationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): [DanceMove!]!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type CreatorAvgAggregate {
  id: Float
}

input CreatorAvgOrderByAggregateInput {
  id: SortOrder
}

type CreatorCount {
  danceMove(where: DanceMoveWhereInput): Int!
}

type CreatorCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input CreatorCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CreatorCreateInput {
  createdAt: DateTimeISO
  danceMove: DanceMoveCreateNestedManyWithoutCreatorInput
  name: String!
  updatedAt: DateTimeISO
}

input CreatorCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  name: String!
  updatedAt: DateTimeISO
}

input CreatorCreateNestedOneWithoutDanceMoveInput {
  connect: CreatorWhereUniqueInput
  connectOrCreate: CreatorCreateOrConnectWithoutDanceMoveInput
  create: CreatorCreateWithoutDanceMoveInput
}

input CreatorCreateOrConnectWithoutDanceMoveInput {
  create: CreatorCreateWithoutDanceMoveInput!
  where: CreatorWhereUniqueInput!
}

input CreatorCreateWithoutDanceMoveInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

type CreatorGroupBy {
  _avg: CreatorAvgAggregate
  _count: CreatorCountAggregate
  _max: CreatorMaxAggregate
  _min: CreatorMinAggregate
  _sum: CreatorSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type CreatorMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input CreatorMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CreatorMinAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input CreatorMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CreatorNullableRelationFilter {
  is: CreatorWhereInput
  isNot: CreatorWhereInput
}

input CreatorOrderByWithAggregationInput {
  _avg: CreatorAvgOrderByAggregateInput
  _count: CreatorCountOrderByAggregateInput
  _max: CreatorMaxOrderByAggregateInput
  _min: CreatorMinOrderByAggregateInput
  _sum: CreatorSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CreatorOrderByWithRelationInput {
  createdAt: SortOrder
  danceMove: DanceMoveOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum CreatorScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CreatorScalarWhereWithAggregatesInput {
  AND: [CreatorScalarWhereWithAggregatesInput!]
  NOT: [CreatorScalarWhereWithAggregatesInput!]
  OR: [CreatorScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CreatorSumAggregate {
  id: Int
}

input CreatorSumOrderByAggregateInput {
  id: SortOrder
}

input CreatorUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  danceMove: DanceMoveUpdateManyWithoutCreatorNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CreatorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CreatorUpdateOneWithoutDanceMoveNestedInput {
  connect: CreatorWhereUniqueInput
  connectOrCreate: CreatorCreateOrConnectWithoutDanceMoveInput
  create: CreatorCreateWithoutDanceMoveInput
  delete: CreatorWhereInput
  disconnect: CreatorWhereInput
  update: CreatorUpdateToOneWithWhereWithoutDanceMoveInput
  upsert: CreatorUpsertWithoutDanceMoveInput
}

input CreatorUpdateToOneWithWhereWithoutDanceMoveInput {
  data: CreatorUpdateWithoutDanceMoveInput!
  where: CreatorWhereInput
}

input CreatorUpdateWithoutDanceMoveInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CreatorUpsertWithoutDanceMoveInput {
  create: CreatorCreateWithoutDanceMoveInput!
  update: CreatorUpdateWithoutDanceMoveInput!
  where: CreatorWhereInput
}

input CreatorWhereInput {
  AND: [CreatorWhereInput!]
  NOT: [CreatorWhereInput!]
  OR: [CreatorWhereInput!]
  createdAt: DateTimeFilter
  danceMove: DanceMoveListRelationFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CreatorWhereUniqueInput {
  AND: [CreatorWhereInput!]
  NOT: [CreatorWhereInput!]
  OR: [CreatorWhereInput!]
  createdAt: DateTimeFilter
  danceMove: DanceMoveListRelationFilter
  id: Int
  name: StringFilter
  updatedAt: DateTimeFilter
}

type DanceMove {
  aliases: [String!]!
  countryOfOrigin: String
  createdAt: DateTimeISO!
  creator(where: CreatorWhereInput): Creator
  creatorId: Int
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: [DateTimeISO!]!
  era: Era
  id: Int!
  name: String!
  officialSong: String
  tutorials: [String!]!
  updatedAt: DateTimeISO!
}

type DanceMoveAvgAggregate {
  creatorId: Float
  id: Float
}

input DanceMoveAvgOrderByAggregateInput {
  creatorId: SortOrder
  id: SortOrder
}

type DanceMoveCountAggregate {
  _all: Int!
  aliases: Int!
  countryOfOrigin: Int!
  createdAt: Int!
  creatorId: Int!
  dateCreated: Int!
  dateLearned: Int!
  datesReviewed: Int!
  era: Int!
  id: Int!
  name: Int!
  officialSong: Int!
  tutorials: Int!
  updatedAt: Int!
}

input DanceMoveCountOrderByAggregateInput {
  aliases: SortOrder
  countryOfOrigin: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  dateCreated: SortOrder
  dateLearned: SortOrder
  datesReviewed: SortOrder
  era: SortOrder
  id: SortOrder
  name: SortOrder
  officialSong: SortOrder
  tutorials: SortOrder
  updatedAt: SortOrder
}

input DanceMoveCreateInput {
  aliases: DanceMoveCreatealiasesInput
  countryOfOrigin: String
  createdAt: DateTimeISO
  creator: CreatorCreateNestedOneWithoutDanceMoveInput
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: DanceMoveCreatedatesReviewedInput
  era: Era
  name: String!
  officialSong: String
  tutorials: DanceMoveCreatetutorialsInput
  updatedAt: DateTimeISO
}

input DanceMoveCreateManyCreatorInput {
  aliases: DanceMoveCreatealiasesInput
  countryOfOrigin: String
  createdAt: DateTimeISO
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: DanceMoveCreatedatesReviewedInput
  era: Era
  id: Int
  name: String!
  officialSong: String
  tutorials: DanceMoveCreatetutorialsInput
  updatedAt: DateTimeISO
}

input DanceMoveCreateManyCreatorInputEnvelope {
  data: [DanceMoveCreateManyCreatorInput!]!
  skipDuplicates: Boolean
}

input DanceMoveCreateManyInput {
  aliases: DanceMoveCreatealiasesInput
  countryOfOrigin: String
  createdAt: DateTimeISO
  creatorId: Int
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: DanceMoveCreatedatesReviewedInput
  era: Era
  id: Int
  name: String!
  officialSong: String
  tutorials: DanceMoveCreatetutorialsInput
  updatedAt: DateTimeISO
}

input DanceMoveCreateNestedManyWithoutCreatorInput {
  connect: [DanceMoveWhereUniqueInput!]
  connectOrCreate: [DanceMoveCreateOrConnectWithoutCreatorInput!]
  create: [DanceMoveCreateWithoutCreatorInput!]
  createMany: DanceMoveCreateManyCreatorInputEnvelope
}

input DanceMoveCreateOrConnectWithoutCreatorInput {
  create: DanceMoveCreateWithoutCreatorInput!
  where: DanceMoveWhereUniqueInput!
}

input DanceMoveCreateWithoutCreatorInput {
  aliases: DanceMoveCreatealiasesInput
  countryOfOrigin: String
  createdAt: DateTimeISO
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: DanceMoveCreatedatesReviewedInput
  era: Era
  name: String!
  officialSong: String
  tutorials: DanceMoveCreatetutorialsInput
  updatedAt: DateTimeISO
}

input DanceMoveCreatealiasesInput {
  set: [String!]!
}

input DanceMoveCreatedatesReviewedInput {
  set: [DateTimeISO!]!
}

input DanceMoveCreatetutorialsInput {
  set: [String!]!
}

type DanceMoveGroupBy {
  _avg: DanceMoveAvgAggregate
  _count: DanceMoveCountAggregate
  _max: DanceMoveMaxAggregate
  _min: DanceMoveMinAggregate
  _sum: DanceMoveSumAggregate
  aliases: [String!]
  countryOfOrigin: String
  createdAt: DateTimeISO!
  creatorId: Int
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  datesReviewed: [DateTimeISO!]
  era: Era
  id: Int!
  name: String!
  officialSong: String
  tutorials: [String!]
  updatedAt: DateTimeISO!
}

input DanceMoveListRelationFilter {
  every: DanceMoveWhereInput
  none: DanceMoveWhereInput
  some: DanceMoveWhereInput
}

type DanceMoveMaxAggregate {
  countryOfOrigin: String
  createdAt: DateTimeISO
  creatorId: Int
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  era: Era
  id: Int
  name: String
  officialSong: String
  updatedAt: DateTimeISO
}

input DanceMoveMaxOrderByAggregateInput {
  countryOfOrigin: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  dateCreated: SortOrder
  dateLearned: SortOrder
  era: SortOrder
  id: SortOrder
  name: SortOrder
  officialSong: SortOrder
  updatedAt: SortOrder
}

type DanceMoveMinAggregate {
  countryOfOrigin: String
  createdAt: DateTimeISO
  creatorId: Int
  dateCreated: DateTimeISO
  dateLearned: DateTimeISO
  era: Era
  id: Int
  name: String
  officialSong: String
  updatedAt: DateTimeISO
}

input DanceMoveMinOrderByAggregateInput {
  countryOfOrigin: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  dateCreated: SortOrder
  dateLearned: SortOrder
  era: SortOrder
  id: SortOrder
  name: SortOrder
  officialSong: SortOrder
  updatedAt: SortOrder
}

input DanceMoveOrderByRelationAggregateInput {
  _count: SortOrder
}

input DanceMoveOrderByWithAggregationInput {
  _avg: DanceMoveAvgOrderByAggregateInput
  _count: DanceMoveCountOrderByAggregateInput
  _max: DanceMoveMaxOrderByAggregateInput
  _min: DanceMoveMinOrderByAggregateInput
  _sum: DanceMoveSumOrderByAggregateInput
  aliases: SortOrder
  countryOfOrigin: SortOrderInput
  createdAt: SortOrder
  creatorId: SortOrderInput
  dateCreated: SortOrderInput
  dateLearned: SortOrderInput
  datesReviewed: SortOrder
  era: SortOrderInput
  id: SortOrder
  name: SortOrder
  officialSong: SortOrderInput
  tutorials: SortOrder
  updatedAt: SortOrder
}

input DanceMoveOrderByWithRelationInput {
  aliases: SortOrder
  countryOfOrigin: SortOrderInput
  createdAt: SortOrder
  creator: CreatorOrderByWithRelationInput
  creatorId: SortOrderInput
  dateCreated: SortOrderInput
  dateLearned: SortOrderInput
  datesReviewed: SortOrder
  era: SortOrderInput
  id: SortOrder
  name: SortOrder
  officialSong: SortOrderInput
  tutorials: SortOrder
  updatedAt: SortOrder
}

enum DanceMoveScalarFieldEnum {
  aliases
  countryOfOrigin
  createdAt
  creatorId
  dateCreated
  dateLearned
  datesReviewed
  era
  id
  name
  officialSong
  tutorials
  updatedAt
}

input DanceMoveScalarWhereInput {
  AND: [DanceMoveScalarWhereInput!]
  NOT: [DanceMoveScalarWhereInput!]
  OR: [DanceMoveScalarWhereInput!]
  aliases: StringNullableListFilter
  countryOfOrigin: StringNullableFilter
  createdAt: DateTimeFilter
  creatorId: IntNullableFilter
  dateCreated: DateTimeNullableFilter
  dateLearned: DateTimeNullableFilter
  datesReviewed: DateTimeNullableListFilter
  era: EnumEraNullableFilter
  id: IntFilter
  name: StringFilter
  officialSong: StringNullableFilter
  tutorials: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input DanceMoveScalarWhereWithAggregatesInput {
  AND: [DanceMoveScalarWhereWithAggregatesInput!]
  NOT: [DanceMoveScalarWhereWithAggregatesInput!]
  OR: [DanceMoveScalarWhereWithAggregatesInput!]
  aliases: StringNullableListFilter
  countryOfOrigin: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  creatorId: IntNullableWithAggregatesFilter
  dateCreated: DateTimeNullableWithAggregatesFilter
  dateLearned: DateTimeNullableWithAggregatesFilter
  datesReviewed: DateTimeNullableListFilter
  era: EnumEraNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  officialSong: StringNullableWithAggregatesFilter
  tutorials: StringNullableListFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type DanceMoveSumAggregate {
  creatorId: Int
  id: Int
}

input DanceMoveSumOrderByAggregateInput {
  creatorId: SortOrder
  id: SortOrder
}

input DanceMoveUpdateInput {
  aliases: DanceMoveUpdatealiasesInput
  countryOfOrigin: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: CreatorUpdateOneWithoutDanceMoveNestedInput
  dateCreated: NullableDateTimeFieldUpdateOperationsInput
  dateLearned: NullableDateTimeFieldUpdateOperationsInput
  datesReviewed: DanceMoveUpdatedatesReviewedInput
  era: NullableEnumEraFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  officialSong: NullableStringFieldUpdateOperationsInput
  tutorials: DanceMoveUpdatetutorialsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DanceMoveUpdateManyMutationInput {
  aliases: DanceMoveUpdatealiasesInput
  countryOfOrigin: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateCreated: NullableDateTimeFieldUpdateOperationsInput
  dateLearned: NullableDateTimeFieldUpdateOperationsInput
  datesReviewed: DanceMoveUpdatedatesReviewedInput
  era: NullableEnumEraFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  officialSong: NullableStringFieldUpdateOperationsInput
  tutorials: DanceMoveUpdatetutorialsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DanceMoveUpdateManyWithWhereWithoutCreatorInput {
  data: DanceMoveUpdateManyMutationInput!
  where: DanceMoveScalarWhereInput!
}

input DanceMoveUpdateManyWithoutCreatorNestedInput {
  connect: [DanceMoveWhereUniqueInput!]
  connectOrCreate: [DanceMoveCreateOrConnectWithoutCreatorInput!]
  create: [DanceMoveCreateWithoutCreatorInput!]
  createMany: DanceMoveCreateManyCreatorInputEnvelope
  delete: [DanceMoveWhereUniqueInput!]
  deleteMany: [DanceMoveScalarWhereInput!]
  disconnect: [DanceMoveWhereUniqueInput!]
  set: [DanceMoveWhereUniqueInput!]
  update: [DanceMoveUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [DanceMoveUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [DanceMoveUpsertWithWhereUniqueWithoutCreatorInput!]
}

input DanceMoveUpdateWithWhereUniqueWithoutCreatorInput {
  data: DanceMoveUpdateWithoutCreatorInput!
  where: DanceMoveWhereUniqueInput!
}

input DanceMoveUpdateWithoutCreatorInput {
  aliases: DanceMoveUpdatealiasesInput
  countryOfOrigin: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateCreated: NullableDateTimeFieldUpdateOperationsInput
  dateLearned: NullableDateTimeFieldUpdateOperationsInput
  datesReviewed: DanceMoveUpdatedatesReviewedInput
  era: NullableEnumEraFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  officialSong: NullableStringFieldUpdateOperationsInput
  tutorials: DanceMoveUpdatetutorialsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DanceMoveUpdatealiasesInput {
  push: [String!]
  set: [String!]
}

input DanceMoveUpdatedatesReviewedInput {
  push: [DateTimeISO!]
  set: [DateTimeISO!]
}

input DanceMoveUpdatetutorialsInput {
  push: [String!]
  set: [String!]
}

input DanceMoveUpsertWithWhereUniqueWithoutCreatorInput {
  create: DanceMoveCreateWithoutCreatorInput!
  update: DanceMoveUpdateWithoutCreatorInput!
  where: DanceMoveWhereUniqueInput!
}

input DanceMoveWhereInput {
  AND: [DanceMoveWhereInput!]
  NOT: [DanceMoveWhereInput!]
  OR: [DanceMoveWhereInput!]
  aliases: StringNullableListFilter
  countryOfOrigin: StringNullableFilter
  createdAt: DateTimeFilter
  creator: CreatorNullableRelationFilter
  creatorId: IntNullableFilter
  dateCreated: DateTimeNullableFilter
  dateLearned: DateTimeNullableFilter
  datesReviewed: DateTimeNullableListFilter
  era: EnumEraNullableFilter
  id: IntFilter
  name: StringFilter
  officialSong: StringNullableFilter
  tutorials: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input DanceMoveWhereUniqueInput {
  AND: [DanceMoveWhereInput!]
  NOT: [DanceMoveWhereInput!]
  OR: [DanceMoveWhereInput!]
  aliases: StringNullableListFilter
  countryOfOrigin: StringNullableFilter
  createdAt: DateTimeFilter
  creator: CreatorNullableRelationFilter
  creatorId: IntNullableFilter
  dateCreated: DateTimeNullableFilter
  dateLearned: DateTimeNullableFilter
  datesReviewed: DateTimeNullableListFilter
  era: EnumEraNullableFilter
  id: Int
  name: StringFilter
  officialSong: StringNullableFilter
  tutorials: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableListFilter {
  equals: [DateTimeISO!]
  has: DateTimeISO
  hasEvery: [DateTimeISO!]
  hasSome: [DateTimeISO!]
  isEmpty: Boolean
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input EnumEraNullableFilter {
  equals: Era
  in: [Era!]
  not: NestedEnumEraNullableFilter
  notIn: [Era!]
}

input EnumEraNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumEraNullableFilter
  _min: NestedEnumEraNullableFilter
  equals: Era
  in: [Era!]
  not: NestedEnumEraNullableWithAggregatesFilter
  notIn: [Era!]
}

enum Era {
  NEW_SCHOOL
  OLD_SCHOOL
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyCreator(data: [CreatorCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyDanceMove(data: [DanceMoveCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneCreator(data: CreatorCreateInput!): Creator!
  createOneDanceMove(data: DanceMoveCreateInput!): DanceMove!
  deleteManyCreator(where: CreatorWhereInput): AffectedRowsOutput!
  deleteManyDanceMove(where: DanceMoveWhereInput): AffectedRowsOutput!
  deleteOneCreator(where: CreatorWhereUniqueInput!): Creator
  deleteOneDanceMove(where: DanceMoveWhereUniqueInput!): DanceMove
  updateManyCreator(data: CreatorUpdateManyMutationInput!, where: CreatorWhereInput): AffectedRowsOutput!
  updateManyDanceMove(data: DanceMoveUpdateManyMutationInput!, where: DanceMoveWhereInput): AffectedRowsOutput!
  updateOneCreator(data: CreatorUpdateInput!, where: CreatorWhereUniqueInput!): Creator
  updateOneDanceMove(data: DanceMoveUpdateInput!, where: DanceMoveWhereUniqueInput!): DanceMove
  upsertOneCreator(create: CreatorCreateInput!, update: CreatorUpdateInput!, where: CreatorWhereUniqueInput!): Creator!
  upsertOneDanceMove(create: DanceMoveCreateInput!, update: DanceMoveUpdateInput!, where: DanceMoveWhereUniqueInput!): DanceMove!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumEraNullableFilter {
  equals: Era
  in: [Era!]
  not: NestedEnumEraNullableFilter
  notIn: [Era!]
}

input NestedEnumEraNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumEraNullableFilter
  _min: NestedEnumEraNullableFilter
  equals: Era
  in: [Era!]
  not: NestedEnumEraNullableWithAggregatesFilter
  notIn: [Era!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableEnumEraFieldUpdateOperationsInput {
  set: Era
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  aggregateCreator(cursor: CreatorWhereUniqueInput, orderBy: [CreatorOrderByWithRelationInput!], skip: Int, take: Int, where: CreatorWhereInput): AggregateCreator!
  aggregateDanceMove(cursor: DanceMoveWhereUniqueInput, orderBy: [DanceMoveOrderByWithRelationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): AggregateDanceMove!
  creator(where: CreatorWhereUniqueInput!): Creator
  creators(cursor: CreatorWhereUniqueInput, distinct: [CreatorScalarFieldEnum!], orderBy: [CreatorOrderByWithRelationInput!], skip: Int, take: Int, where: CreatorWhereInput): [Creator!]!
  danceMove(where: DanceMoveWhereUniqueInput!): DanceMove
  danceMoves(cursor: DanceMoveWhereUniqueInput, distinct: [DanceMoveScalarFieldEnum!], orderBy: [DanceMoveOrderByWithRelationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): [DanceMove!]!
  findFirstCreator(cursor: CreatorWhereUniqueInput, distinct: [CreatorScalarFieldEnum!], orderBy: [CreatorOrderByWithRelationInput!], skip: Int, take: Int, where: CreatorWhereInput): Creator
  findFirstCreatorOrThrow(cursor: CreatorWhereUniqueInput, distinct: [CreatorScalarFieldEnum!], orderBy: [CreatorOrderByWithRelationInput!], skip: Int, take: Int, where: CreatorWhereInput): Creator
  findFirstDanceMove(cursor: DanceMoveWhereUniqueInput, distinct: [DanceMoveScalarFieldEnum!], orderBy: [DanceMoveOrderByWithRelationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): DanceMove
  findFirstDanceMoveOrThrow(cursor: DanceMoveWhereUniqueInput, distinct: [DanceMoveScalarFieldEnum!], orderBy: [DanceMoveOrderByWithRelationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): DanceMove
  getCreator(where: CreatorWhereUniqueInput!): Creator
  getDanceMove(where: DanceMoveWhereUniqueInput!): DanceMove
  groupByCreator(by: [CreatorScalarFieldEnum!]!, having: CreatorScalarWhereWithAggregatesInput, orderBy: [CreatorOrderByWithAggregationInput!], skip: Int, take: Int, where: CreatorWhereInput): [CreatorGroupBy!]!
  groupByDanceMove(by: [DanceMoveScalarFieldEnum!]!, having: DanceMoveScalarWhereWithAggregatesInput, orderBy: [DanceMoveOrderByWithAggregationInput!], skip: Int, take: Int, where: DanceMoveWhereInput): [DanceMoveGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}